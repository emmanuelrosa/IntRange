{
  "name": "IntRange",
  "document": "The library provides fold/map/zip to the range of numbers without consuming memory.\n\nIntRange.foldl/foldr/maps can be used replacement of [Int] value\nwhich represents certain range of Int values.\n\nThis is useful when iterate vast numbers without consuming memory.\n\nFor example,\n\n          import IntRange (to)\n          import IntRange\n          Import List\n\n          IntRange.foldl (+) 0 (0 `to` 100000000) -- Can be calculate without consuming memory.\n          List.foldl (+) 0 [0..100000000] -- Require memory fo the list which length is 100000000.\n\nBoth of List.foldl and IntRange.foldl don't consumes call stack, but\nList.foldl version consumes vast amount of memory in the contrast of\nIntRange.fold requres relatively small constant memory.\n\n# Create IntRange\n@docs to\n\n# Iteration\n@docs foldl, foldr, map, zip, zipWith\n\n# Convert\n@docs toList",
  "aliases": [],
  "datatypes": [
    {
      "name": "IntRange",
      "comment": "",
      "raw": "data IntRange = IntRange Int Int",
      "typeVariables": [],
      "constructors": [
        {
          "name": "IntRange",
          "type": {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              }
            ],
            "result": {
              "tag": "adt",
              "name": "IntRange",
              "args": []
            }
          }
        }
      ]
    }
  ],
  "values": [
    {
      "name": "foldl",
      "comment": "Reduce a range from the left: `(foldl (::) [] (1 `to` 3) == [3,2,1])`",
      "raw": "foldl : (Int -\u003e b -\u003e b) -\u003e b -\u003e IntRange -\u003e b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              },
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "var",
            "name": "b"
          },
          {
            "tag": "adt",
            "name": "IntRange",
            "args": []
          }
        ],
        "result": {
          "tag": "var",
          "name": "b"
        }
      }
    },
    {
      "name": "foldr",
      "comment": "Reduce a range from the right: `(foldr (+) 0 (1 `to` 3) == 6)`",
      "raw": "foldr : (Int -\u003e b -\u003e b) -\u003e b -\u003e IntRange -\u003e b",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              },
              {
                "tag": "var",
                "name": "b"
              }
            ],
            "result": {
              "tag": "var",
              "name": "b"
            }
          },
          {
            "tag": "var",
            "name": "b"
          },
          {
            "tag": "adt",
            "name": "IntRange",
            "args": []
          }
        ],
        "result": {
          "tag": "var",
          "name": "b"
        }
      }
    },
    {
      "name": "map",
      "comment": "Apply a function to every Int numbers in a list: `(map (\\it-\u003eit*2) (1 `to` 3) == [2,4,6])`",
      "raw": "map : (Int -\u003e a) -\u003e IntRange -\u003e [a]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              }
            ],
            "result": {
              "tag": "var",
              "name": "a"
            }
          },
          {
            "tag": "adt",
            "name": "IntRange",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "a"
            }
          ]
        }
      }
    },
    {
      "name": "to",
      "comment": "Create range from two Ints. The range starts with first one and\n    end with second one. both of values are included in the range.\n    In the other word (InRange start end) include both of start and end.",
      "raw": "to : Int -\u003e Int -\u003e IntRange",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "IntRange",
          "args": []
        }
      }
    },
    {
      "name": "toList",
      "comment": "Convert IntRange to List of Int([Int]).",
      "raw": "toList : IntRange -\u003e [Int]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "IntRange",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            }
          ]
        }
      }
    },
    {
      "name": "zip",
      "comment": "Combine a list and an IntRange, combining them into tuples pairwise.\nIf one list or IntRange is longer, the extra elements are dropped.\n\n      zip [1,2,3] (6 `to` 7) == [(1,6),(2,7)]\n      zip == zipWith (,)",
      "raw": "zip : [a] -\u003e IntRange -\u003e [(a,Int)]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "IntRange",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "adt",
              "name": "_Tuple2",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                },
                {
                  "tag": "adt",
                  "name": "Int",
                  "args": []
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "zipWith",
      "comment": "Combine a list and an IntRange, combining them with the given function.\nIf one list is longer, the extra elements are dropped.\n\n  zipWith (+) [1,2,3] (1 `to` 4) == [2,4,6]",
      "raw": "zipWith : (a -\u003e Int -\u003e c) -\u003e [a] -\u003e IntRange -\u003e [c]",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "var",
                "name": "a"
              },
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              }
            ],
            "result": {
              "tag": "var",
              "name": "c"
            }
          },
          {
            "tag": "adt",
            "name": "_List",
            "args": [
              {
                "tag": "var",
                "name": "a"
              }
            ]
          },
          {
            "tag": "adt",
            "name": "IntRange",
            "args": []
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_List",
          "args": [
            {
              "tag": "var",
              "name": "c"
            }
          ]
        }
      }
    }
  ]
}